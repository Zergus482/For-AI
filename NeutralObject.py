from abc import *
from Units import *


class NeutralObject(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤"""
    
    def __init__(self, name: str, symbol: str):
        self.name = name
        self.symbol = symbol
        self.x = None
        self.y = None
    
    @abstractmethod
    def __mod__(self, unit: 'Unit') -> bool:
        """–ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ % –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —é–Ω–∏—Ç–∞ —Å –æ–±—ä–µ–∫—Ç–æ–º"""
        pass
    
    def set_position(self, x: int, y: int):
        self.x = x
        self.y = y
    
    def get_position(self):
        return (self.x, self.y)
    
    def __str__(self):
        return f"{self.name} ({self.symbol})"

class HealingFountain(NeutralObject):
    """–¶–µ–ª–µ–±–Ω—ã–π —Ñ–æ–Ω—Ç–∞–Ω - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ"""
    
    def __init__(self):
        super().__init__("–¶–µ–ª–µ–±–Ω—ã–π —Ñ–æ–Ω—Ç–∞–Ω", "F")
        self.heal_power = 50
    
    def __mod__(self, unit: 'Unit') -> bool:
        """–Æ–Ω–∏—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–æ–Ω—Ç–∞–Ω –¥–ª—è –ª–µ—á–µ–Ω–∏—è"""
        if unit.is_alive():
            old_health = unit.health
            unit.heal(self.heal_power)
            heal_amount = unit.health - old_health
            print(f"üéµ {unit.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç {self.name} –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç {heal_amount} HP!")
            return True
        return False

class ArmorSmith(NeutralObject):
    """–ö—É–∑–Ω–µ—Ü –±—Ä–æ–Ω–∏ - –≤—Ä–µ–º–µ–Ω–Ω–æ —É—Å–∏–ª–∏–≤–∞–µ—Ç –±—Ä–æ–Ω—é"""
    
    def __init__(self):
        super().__init__("–ö—É–∑–Ω–µ—Ü –±—Ä–æ–Ω–∏", "K")
        self.armor_boost = 10
        self.duration = 3  # —Ö–æ–¥–∞
    
    def __mod__(self, unit: 'Unit') -> bool:
        """–Æ–Ω–∏—Ç —É–ª—É—á—à–∞–µ—Ç –±—Ä–æ–Ω—é"""
        if unit.is_alive():
            unit.armor += self.armor_boost
            print(f"üõ°Ô∏è {unit.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç {self.name}! –ë—Ä–æ–Ω—è —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ {self.armor_boost} –Ω–∞ {self.duration} —Ö–æ–¥–∞.")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞
            return True
        return False

class Trap(NeutralObject):
    """–õ–æ–≤—É—à–∫–∞ - –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω —é–Ω–∏—Ç—É"""
    
    def __init__(self):
        super().__init__("–õ–æ–≤—É—à–∫–∞", "T")
        self.damage = 30
        self.visible = False
    
    def __mod__(self, unit: 'Unit') -> bool:
        """–Æ–Ω–∏—Ç –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ª–æ–≤—É—à–∫—É"""
        if unit.is_alive():
            actual_damage = unit.take_damage(self.damage)
            print(f"üí• {unit.name} –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç {self.name} –∏ –ø–æ–ª—É—á–∞–µ—Ç {actual_damage} —É—Ä–æ–Ω–∞!")
            self.visible = True
            return True
        return False

class TreasureChest(NeutralObject):
    """–°—É–Ω–¥—É–∫ —Å —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏ - –¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É—Å–∏–ª–µ–Ω–∏–µ –∞—Ç–∞–∫–∏"""
    
    def __init__(self):
        super().__init__("–°—É–Ω–¥—É–∫ —Å —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏", "S")
        self.attack_boost = 15
        self.duration = 2
    
    def __mod__(self, unit: 'Unit') -> bool:
        """–Æ–Ω–∏—Ç –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—É–Ω–¥—É–∫"""
        if unit.is_alive():
            unit.attack += self.attack_boost
            print(f"üíé {unit.name} –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç {self.name}! –ê—Ç–∞–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ {self.attack_boost} –Ω–∞ {self.duration} —Ö–æ–¥–∞.")
            return True
        return False