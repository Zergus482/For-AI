import os
import random
from GameField import GameField
from Units import UnitFactory
from Base import Base
from NeutralObject import HealingFountain, ArmorSmith, Trap, TreasureChest
from UnitManager import UnitManager
from BaseManager import BaseManager
from GameConfig import GameConfig

class Game:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã —Å –∫–æ–Ω—Å–æ–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    
    def __init__(self):
        self.game_field = None
        self.unit_manager = None
        self.base_manager = None
        self.turn_count = 0
        self.is_running = False
        self.config = GameConfig()
    
    def initialize_game(self):
        print("\nüéÆ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ù–û–í–û–ô –ò–ì–†–´")
        
        try:
            width = int(input("–®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 8-15): ") or "10")
            height = int(input("–í—ã—Å–æ—Ç–∞ –ø–æ–ª—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 8-15): ") or "10")
            max_units = int(input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–Ω–∏—Ç–æ–≤: ") or "20")
            
            self.game_field = GameField(width, height, max_units)
            self.unit_manager = UnitManager(self.game_field)
            self.base_manager = BaseManager(self.game_field)
            
            base_name = input("–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –±–∞–∑—ã: ") or "–ì–ª–∞–≤–Ω–∞—è –±–∞–∑–∞"
            base = Base(base_name)
            
            base_x, base_y = width // 4, height // 4
            self.game_field.add_base(base, base_x, base_y)
            
            print("\nüè≠ –°–û–ó–î–ê–ù–ò–ï –ù–ê–ß–ê–õ–¨–ù–´–• –Æ–ù–ò–¢–û–í...")
            base.create_unit('swordsman', self.game_field)
            base.create_unit('crossbowman', self.game_field)
            base.create_unit('healer', self.game_field)
            
            self._place_initial_objects()
            
            print("‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
            return True
            
        except ValueError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def _place_initial_objects(self):
        objects = [
            HealingFountain(),
            ArmorSmith(),
            Trap(),
            TreasureChest()
        ]
        
        placed = 0
        attempts = 0
        max_attempts = 20
        
        while placed < len(objects) and attempts < max_attempts:
            x = random.randint(0, self.game_field.width - 1)
            y = random.randint(0, self.game_field.height - 1)
            
            if self.game_field.is_cell_empty(x, y) and not any(
                base.get_position() == (x, y) for base in self.game_field.bases
            ):
                self.game_field.add_neutral_object(objects[placed], x, y)
                placed += 1
            
            attempts += 1
    
    def display_game_status(self):
        print(f"\nüìä –°–¢–ê–¢–£–° –ò–ì–†–´ - –•–æ–¥ {self.turn_count}")
        print(f"üéØ –Æ–Ω–∏—Ç–æ–≤ –Ω–∞ –ø–æ–ª–µ: {len(self.game_field.units)}/{self.game_field.max_units}")
        print(f"üè∞ –ë–∞–∑: {len(self.game_field.bases)}")
        print(f"üéÅ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {len(self.game_field.neutral_objects)}")
        
        for base in self.game_field.bases:
            status = "–∂–∏–≤–∞" if base.is_alive() else "—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞"
            print(f"  {base.name}: {base.health} HP ({status})")
    
    def next_turn(self):
        self.turn_count += 1
        print(f"\nüîÑ –•–û–î {self.turn_count}")
        
        for base in self.game_field.bases:
            base.update_units()
            
            if base.is_alive():
                base.collect_resources(50)
        
        alive_bases = [base for base in self.game_field.bases if base.is_alive()]
        if not alive_bases:
            print("üíÄ –í–°–ï –ë–ê–ó–´ –£–ù–ò–ß–¢–û–ñ–ï–ù–´! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
            self.is_running = False
            return
        
        print("‚úÖ –•–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω. –†–µ—Å—É—Ä—Å—ã –±–∞–∑ –ø–æ–ø–æ–ª–Ω–µ–Ω—ã.")
    
    def save_game(self):
        print("üíæ –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –∑–∞–¥–∞—á–µ 4")
    
    def load_game(self):
        print("üìÇ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –∑–∞–¥–∞—á–µ 4")
    
    def show_main_menu(self):
        while True:
            print(f"\n{'='*50}")
            print("üéÆ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ò–ì–†–´")
            print(f"{'='*50}")
            print("1. üó∫Ô∏è  –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–µ")
            print("2. üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —é–Ω–∏—Ç–∞–º–∏")
            print("3. üè∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π")
            print("4. üìä –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã")
            print("5. ‚û°Ô∏è  –°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥")
            print("6. üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É")
            print("7. üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É")
            print("8. üÜï –ù–æ–≤–∞—è –∏–≥—Ä–∞")
            print("9. üö™ –í—ã—Ö–æ–¥")
            print("10. ‚öôÔ∏è  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
            
            try:
                choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")
                
                if choice == '1':
                    self.game_field.display()
                elif choice == '2':
                    self.unit_manager.show_unit_menu()
                elif choice == '3':
                    self.base_manager.show_base_menu()
                elif choice == '4':
                    self.display_game_status()
                elif choice == '5':
                    self.next_turn()
                elif choice == '6':
                    self.save_game()
                elif choice == '7':
                    self.load_game()
                elif choice == '8':
                    if self.initialize_game():
                        self.turn_count = 0
                        self.is_running = True
                elif choice == '10':
                    self.show_config_menu() 
                elif choice == '9':
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    self.is_running = False
                    break
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def start(self):
        print("üéÆ –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –ò–ì–†–£!")
        print("="*50)
        
        if self.initialize_game():
            self.is_running = True
            self.turn_count = 0
            self.show_main_menu()
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É")


    def show_config_menu(self):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
        while True:
            print(f"\n{'='*50}")
            print("‚öôÔ∏è  –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ï–ô")
            print(f"{'='*50}")
            print("1. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
            print("2. ‚úèÔ∏è  –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
            print("3. üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª")
            print("4. üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞")
            print("5. ‚Ü©Ô∏è  –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            
            try:
                choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")
                
                if choice == '1':
                    self.config.display_config()
                elif choice == '2':
                    self.config.update_config_interactive()
                elif choice == '3':
                    filename = input("–ò–º—è —Ñ–∞–π–ª–∞ [game_config.json]: ") or "game_config.json"
                    self.config.save_to_file(filename)
                elif choice == '4':
                    filename = input("–ò–º—è —Ñ–∞–π–ª–∞ [game_config.json]: ") or "game_config.json"
                    self.config.load_from_file(filename)
                elif choice == '5':
                    break
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    