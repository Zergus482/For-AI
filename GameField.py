import random
from typing import List, Optional
from Units import Unit, Infantry, Archer, Cavalry, Healer, Ballista
from Landscape import Landscape, Plain, Forest, Mountain, Swamp
from NeutralObject import NeutralObject
from Base import Base

class GameField:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è —Å –ª–∞–Ω–¥—à–∞—Ñ—Ç–æ–º –∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏"""
    
    def __init__(self, width: int, height: int, max_units: int = 50):
        if width <= 0 or height <= 0:
            raise ValueError("–†–∞–∑–º–µ—Ä—ã –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏")
        if max_units <= 0:
            raise ValueError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–Ω–∏—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
            
        self.width = width
        self.height = height
        self.max_units = max_units
        self.grid = [[None for _ in range(width)] for _ in range(height)]
        self.terrain = self._generate_terrain()
        self.neutral_objects = []
        self.units = []
        self.bases = []
        self.unit_id_counter = 1

    def _generate_terrain(self) -> List[List[Landscape]]:
        terrain_grid = []
        for y in range(self.height):
            row = []
            for x in range(self.height):
                rand = random.random()
                if rand < 0.6:
                    row.append(Plain())
                elif rand < 0.8:
                    row.append(Forest())
                elif rand < 0.95:
                    row.append(Mountain())
                else:
                    row.append(Swamp())
            terrain_grid.append(row)
        return terrain_grid

    def add_base(self, base: Base, x: int, y: int) -> bool:
        if not self._is_valid_position(x, y):
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –±–∞–∑—ã: ({x}, {y})")
            return False
            
        if not self.is_cell_empty(x, y):
            print(f"‚ùå –ö–ª–µ—Ç–∫–∞ ({x}, {y}) —É–∂–µ –∑–∞–Ω—è—Ç–∞")
            return False
            
        base.set_position(x, y)
        self.bases.append(base)
        self.grid[y][x] = base
        print(f"‚úÖ –ë–∞–∑–∞ '{base.name}' —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ –∫–ª–µ—Ç–∫–µ ({x}, {y})")
        return True

    def add_neutral_object(self, obj: NeutralObject, x: int, y: int) -> bool:
        if not self._is_valid_position(x, y):
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞: ({x}, {y})")
            return False
            
        if not self.is_cell_empty(x, y):
            print(f"‚ùå –ö–ª–µ—Ç–∫–∞ ({x}, {y}) —É–∂–µ –∑–∞–Ω—è—Ç–∞")
            return False
            
        obj.set_position(x, y)
        self.neutral_objects.append(obj)
        self.grid[y][x] = obj
        print(f"‚úÖ {obj.name} —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ –∫–ª–µ—Ç–∫–µ ({x}, {y})")
        return True

    def interact_with_object(self, unit: Unit, x: int, y: int) -> bool:
        if not self._is_valid_position(x, y):
            return False
            
        target = self.grid[y][x]
        if isinstance(target, NeutralObject):
            result = target % unit
            if result:
                self.neutral_objects.remove(target)
                self.grid[y][x] = None
            return result
        return False

    def move_unit(self, unit: Unit, new_x: int, new_y: int) -> bool:
        if unit not in self.units:
            print(f"‚ùå –Æ–Ω–∏—Ç {unit.name} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–ª–µ")
            return False
            
        if not self._is_valid_position(new_x, new_y):
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({new_x}, {new_y})")
            return False
            
        if not self.is_cell_empty(new_x, new_y):
            target = self.grid[new_x][new_y]
            if isinstance(target, NeutralObject):
                return self.interact_with_object(unit, new_x, new_y)
            else:
                print(f"‚ùå –ö–ª–µ—Ç–∫–∞ ({new_x}, {new_y}) —É–∂–µ –∑–∞–Ω—è—Ç–∞")
                return False
        
        terrain = self.terrain[new_y][new_x]
        if not terrain.can_pass(unit):
            print(f"‚ùå {unit.name} –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ {terrain}")
            return False
            
        old_x, old_y = unit.get_position()
        
        distance = abs(new_x - old_x) + abs(new_y - old_y)
        move_cost = terrain.move_cost
        if distance > unit.move_range / move_cost:
            print(f"‚ùå {unit.name} –Ω–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è —Ç–∞–∫ –¥–∞–ª–µ–∫–æ —á–µ—Ä–µ–∑ {terrain}")
            return False
        
        self.grid[old_y][old_x] = None
        self.grid[new_y][new_x] = unit
        unit.set_position(new_x, new_y)
        
        attack_bonus = terrain.get_attack_bonus(unit)
        if attack_bonus != 1.0:
            print(f"üåÑ {unit.name} –Ω–∞ {terrain}: –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞—Ç–∞–∫–∏ {attack_bonus}")
        
        print(f"üéØ {unit.name} –ø–µ—Ä–µ–º–µ—â–µ–Ω —Å ({old_x}, {old_y}) –Ω–∞ ({new_x}, {new_y}) —á–µ—Ä–µ–∑ {terrain}")
        return True

    def attack_unit(self, attacker: Unit, target_x: int, target_y: int) -> bool:
        target = self.get_unit_at(target_x, target_y)
        if not target:
            print(f"‚ùå –í –∫–ª–µ—Ç–∫–µ ({target_x}, {target_y}) –Ω–µ—Ç —é–Ω–∏—Ç–∞")
            return False
            
        attacker_terrain = self.terrain[attacker.y][attacker.x]
        attack_modifier = attacker_terrain.get_attack_bonus(attacker)
        
        damage = int(attacker.attack * attack_modifier)
        actual_damage = target.take_damage(damage)
        
        print(f"‚öîÔ∏è {attacker.name} –∞—Ç–∞–∫—É–µ—Ç {target.name} —Å –ø–æ–∑–∏—Ü–∏–∏ {attacker_terrain}!")
        print(f"üí• –ù–∞–Ω–µ—Å–µ–Ω–æ —É—Ä–æ–Ω–∞: {actual_damage} (–º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {attack_modifier})")
        
        if not target.is_alive():
            print(f"üíÄ {target.name} —É–Ω–∏—á—Ç–æ–∂–µ–Ω!")
            self.remove_unit(target)
            
        return True

    def display(self):
        print(f"\nüéÆ –ò–ì–†–û–í–û–ï –ü–û–õ–ï {self.width}x{self.height}")
        print(f"   –Æ–Ω–∏—Ç–æ–≤: {len(self.units)}/{self.max_units}, –ë–∞–∑: {len(self.bases)}, –û–±—ä–µ–∫—Ç–æ–≤: {len(self.neutral_objects)}")
        print("   " + " ".join(f"{i:2}" for i in range(self.width)))
        
        terrain_symbols = {
            Plain: " ",
            Forest: "‚ô£",
            Mountain: "‚ñ≤", 
            Swamp: "~"
        }
        
        for y in range(self.height):
            row_str = f"{y:2} "
            for x in range(self.width):
                cell = self.grid[y][x]
                if cell:
                    if isinstance(cell, Unit):
                        if isinstance(cell, Infantry):
                            symbol = "I"
                        elif isinstance(cell, Archer):
                            if isinstance(cell, Ballista):
                                symbol = "B"
                            else:
                                symbol = "A" 
                        elif isinstance(cell, Cavalry):
                            symbol = "C"
                        elif isinstance(cell, Healer):
                            symbol = "H"
                        else:
                            symbol = "U"
                        row_str += f"[{symbol}]"
                    elif isinstance(cell, Base):
                        row_str += "[üè∞]"
                    elif isinstance(cell, NeutralObject):
                        row_str += f"[{cell.symbol}]"
                else:
                    terrain_symbol = terrain_symbols.get(type(self.terrain[y][x]), " ")
                    row_str += f" {terrain_symbol} "
            print(row_str)

        print("\nüìã –õ–ï–ì–ï–ù–î–ê:")
        print("I-–ø–µ—Ö–æ—Ç–∞ A-–ª—É—á–Ω–∏–∫–∏ C-–∫–∞–≤–∞–ª–µ—Ä–∏—è H-–ª–µ–∫–∞—Ä—å üè∞-–±–∞–∑–∞ ‚ö±-—Ñ–æ–Ω—Ç–∞–Ω K-–∫—É–∑–Ω–µ—Ü T-–ª–æ–≤—É—à–∫–∞ S-—Å—É–Ω–¥—É–∫")
        print("‚ô£-–ª–µ—Å ‚ñ≤-–≥–æ—Ä—ã ~-–±–æ–ª–æ—Ç–æ  -—Ä–∞–≤–Ω–∏–Ω–∞")

    def get_terrain_at(self, x: int, y: int) -> Optional[Landscape]:
        if not self._is_valid_position(x, y):
            return None
        return self.terrain[y][x]

    def _is_valid_position(self, x: int, y: int) -> bool:
        return 0 <= x < self.width and 0 <= y < self.height

    def is_cell_empty(self, x: int, y: int) -> bool:
        cell = self.get_unit_at(x, y)
        return cell is None or isinstance(cell, NeutralObject)

    def get_unit_at(self, x: int, y: int) -> Optional[Unit]:
        if not self._is_valid_position(x, y):
            return None
        cell = self.grid[y][x]
        return cell if isinstance(cell, Unit) else None

    def add_unit(self, unit: Unit, x: int, y: int) -> bool:
        if not self._is_valid_position(x, y):
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({x}, {y})")
            return False
            
        terrain = self.terrain[y][x]
        if not terrain.can_pass(unit):
            print(f"‚ùå {unit.name} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ {terrain}")
            return False
            
        if len(self.units) >= self.max_units:
            print(f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–Ω–∏—Ç–æ–≤: {self.max_units}")
            return False
            
        if not self.is_cell_empty(x, y):
            print(f"‚ùå –ö–ª–µ—Ç–∫–∞ ({x}, {y}) —É–∂–µ –∑–∞–Ω—è—Ç–∞")
            return False
            
        if not unit.is_alive():
            print(f"‚ùå –Æ–Ω–∏—Ç {unit.name} –º–µ—Ä—Ç–≤ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω")
            return False

        unit.set_position(x, y)
        unit.id = self.unit_id_counter
        self.unit_id_counter += 1
        
        self.grid[y][x] = unit
        self.units.append(unit)
        
        print(f"‚úÖ {unit.name} —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ –∫–ª–µ—Ç–∫–µ ({x}, {y}) –Ω–∞ {terrain}")
        return True

    def remove_unit(self, unit: Unit) -> bool:
        if unit not in self.units:
            print(f"‚ùå –Æ–Ω–∏—Ç {unit.name} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–ª–µ")
            return False
            
        x, y = unit.get_position()
        if self._is_valid_position(x, y) and self.grid[y][x] == unit:
            self.grid[y][x] = None
            
        self.units.remove(unit)
        
        for base in self.bases:
            if unit in base.owned_units:
                base.owned_units.remove(unit)
                
        print(f"üóëÔ∏è –Æ–Ω–∏—Ç {unit.name} —É–¥–∞–ª–µ–Ω —Å –ø–æ–ª—è")
        return True
    
    def get_unit_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —é–Ω–∏—Ç–∞—Ö –Ω–∞ –ø–æ–ª–µ"""
        if not self.units:
            print("‚ùå –ù–∞ –ø–æ–ª–µ –Ω–µ—Ç —é–Ω–∏—Ç–æ–≤")
        return
    
        print(f"\nüìã –°–ü–ò–°–û–ö –Æ–ù–ò–¢–û–í –ù–ê –ü–û–õ–ï:")
        for i, unit in enumerate(self.units, 1):
            try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                if hasattr(unit, 'get_position'):
                    pos = unit.get_position()
                    x, y = pos if pos else ("?", "?")
                else:
                    x, y = getattr(unit, 'x', "?"), getattr(unit, 'y', "?")
            
                status = "–∂–∏–≤" if unit.is_alive() else "–º–µ—Ä—Ç–≤"
            
                print(f"{i}. {unit.name} - ({x}, {y}) - {status}")
                print(f"   ‚ù§Ô∏è {unit.health}/{unit.max_health} HP | ‚öîÔ∏è {unit.attack} ATK | üõ°Ô∏è {unit.armor} ARM")
            except Exception as e:
                print(f"{i}. –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —é–Ω–∏—Ç–µ: {e}")