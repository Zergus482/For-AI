from GameField import GameField



class BaseManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    
    def __init__(self, game_field: GameField):
        self.game_field = game_field
        self.selected_base = None
    
    def select_base(self) -> bool:
        if not self.game_field.bases:
            print("‚ùå –ù–∞ –ø–æ–ª–µ –Ω–µ—Ç –±–∞–∑")
            return False
        
        if len(self.game_field.bases) == 1:
            self.selected_base = self.game_field.bases[0]
            print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –±–∞–∑–∞: {self.selected_base.name}")
            return True
        else:
            print(f"\nüè∞ –í–´–ë–û–† –ë–ê–ó–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø")
            for i, base in enumerate(self.game_field.bases, 1):
                print(f"{i}. {base.name} ({base.health} HP)")
            
            try:
                choice = int(input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∞–∑—ã –¥–ª—è –≤—ã–±–æ—Ä–∞: ")) - 1
                if 0 <= choice < len(self.game_field.bases):
                    self.selected_base = self.game_field.bases[choice]
                    print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –±–∞–∑–∞: {self.selected_base.name}")
                    return True
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –±–∞–∑—ã")
                    return False
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
                return False
    
    def show_base_status(self):
        if not self.selected_base:
            print("‚ùå –ë–∞–∑–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
            return
        
        print(self.selected_base.get_status())
    
    def create_unit_from_base(self):
        if not self.selected_base:
            if not self.select_base():
                return
        
        print(f"\nüè≠ –°–û–ó–î–ê–ù–ò–ï –Æ–ù–ò–¢–ê –ß–ï–†–ï–ó –ë–ê–ó–£ '{self.selected_base.name}'")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —é–Ω–∏—Ç–æ–≤:")
        
        unit_types = [
            ('swordsman', '–ú–µ—á–Ω–∏–∫', 100),
            ('spearman', '–ö–æ–ø–µ–π—â–∏–∫', 80),
            ('crossbowman', '–ê—Ä–±–∞–ª–µ—Ç—á–∏–∫', 120),
            ('ballista', '–ë–∞–ª–ª–∏—Å—Ç–∞', 150),
            ('knight', '–†—ã—Ü–∞—Ä—å', 200),
            ('horseman', '–í—Å–∞–¥–Ω–∏–∫', 180),
            ('healer', '–õ–µ–∫–∞—Ä—å', 90)
        ]
        
        for i, (unit_type, name, cost) in enumerate(unit_types, 1):
            print(f"{i}. {name} - {cost} —Ä–µ—Å—É—Ä—Å–æ–≤")
        
        try:
            choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —é–Ω–∏—Ç–∞: ")) - 1
            if 0 <= choice < len(unit_types):
                unit_type = unit_types[choice][0]
                self.selected_base.create_unit(unit_type, self.game_field)
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    
    def collect_resources(self):
        if not self.selected_base:
            if not self.select_base():
                return
        
        try:
            amount = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —Å–±–æ—Ä–∞: "))
            if amount > 0:
                self.selected_base.collect_resources(amount)
            else:
                print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    
    def show_base_menu(self):
        if not self.selected_base:
            if not self.select_base():
                return
        
        while True:
            print(f"\n –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ó–û–ô: {self.selected_base.name}")
            print("1.  –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å")
            print("2.  –°–æ–∑–¥–∞—Ç—å —é–Ω–∏—Ç")
            print("3.  –°–æ–±—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã")
            print("4.  –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –±–∞–∑—É")
            print("5. ‚Ü© –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            
            try:
                choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")
                
                if choice == '1':
                    self.show_base_status()
                elif choice == '2':
                    self.create_unit_from_base()
                elif choice == '3':
                    self.collect_resources()
                elif choice == '4':
                    if self.select_base():
                        continue
                    else:
                        break
                elif choice == '5':
                    break
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")