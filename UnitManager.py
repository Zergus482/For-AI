from GameField import GameField
from Units import *

class UnitManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —é–Ω–∏—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    
    def __init__(self, game_field: GameField):
        self.game_field = game_field
        self.selected_unit = None
    
    def select_unit(self) -> bool:
        if not self.game_field.units:
            print("‚ùå –ù–∞ –ø–æ–ª–µ –Ω–µ—Ç —é–Ω–∏—Ç–æ–≤")
            return False
        
        print(f"\n –í–´–ë–û–† –Æ–ù–ò–¢–ê –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø")
        self.game_field.get_unit_info()
        
        try:
            choice = int(input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —é–Ω–∏—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞: ")) - 1
            if 0 <= choice < len(self.game_field.units):
                self.selected_unit = self.game_field.units[choice]
                print(f"‚úÖ –í—ã–±—Ä–∞–Ω —é–Ω–∏—Ç: {self.selected_unit.name}")
                self.show_unit_status()
                return True
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —é–Ω–∏—Ç–∞")
                return False
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
            return False
    
    def show_unit_status(self):
        if not self.selected_unit:
            print("‚ùå –Æ–Ω–∏—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return
        
        unit = self.selected_unit
        x, y = unit.get_position()
        terrain = self.game_field.get_terrain_at(x, y)
        
        print(f"\n –°–¢–ê–¢–£–° –Æ–ù–ò–¢–ê:")
        print(f"  –ò–º—è: {unit.name} [ID: {unit.id}]")
        print(f" –ü–æ–∑–∏—Ü–∏—è: ({x}, {y}) - {terrain}")
        print(f"  –ó–¥–æ—Ä–æ–≤—å–µ: {unit.health}/{unit.max_health}")
        print(f"  –ë—Ä–æ–Ω—è: {unit.armor}")
        print(f"  –ê—Ç–∞–∫–∞: {unit.attack}")
        print(f" –î–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: {unit.move_range}")
        
        if isinstance(unit, Archer):
            print(f" –î–∞–ª—å–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏: {unit.attack_range}")
        
        self.show_available_moves()
    
    def show_available_moves(self):
        if not self.selected_unit:
            return
        
        unit = self.selected_unit
        x, y = unit.get_position()
        
        print(f"\nüó∫Ô∏è  –î–û–°–¢–£–ü–ù–´–ï –ö–õ–ï–¢–ö–ò –î–õ–Ø –ü–ï–†–ï–ú–ï–©–ï–ù–ò–Ø:")
        available_cells = []
        
        for dy in range(-unit.move_range, unit.move_range + 1):
            for dx in range(-unit.move_range, unit.move_range + 1):
                if dx == 0 and dy == 0:
                    continue
                
                new_x, new_y = x + dx, y + dy
                if (self.game_field._is_valid_position(new_x, new_y) and 
                    self.game_field.is_cell_empty(new_x, new_y)):
                    
                    terrain = self.game_field.get_terrain_at(new_x, new_y)
                    if terrain and terrain.can_pass(unit):
                        available_cells.append((new_x, new_y))
                        print(f"  ({new_x}, {new_y}) - {terrain}")
        
        if not available_cells:
            print("  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è")
    
    def move_unit(self) -> bool:
        if not self.selected_unit:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —é–Ω–∏—Ç–∞")
            return False
        
        try:
            x = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É X –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: "))
            y = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É Y –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: "))
            
            if self.game_field.move_unit(self.selected_unit, x, y):
                self.show_unit_status()
                return True
            return False
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
            return False
    
    def attack_with_unit(self) -> bool:
        if not self.selected_unit:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —é–Ω–∏—Ç–∞")
            return False
        
        if not self.selected_unit.is_alive():
            print("‚ùå –Æ–Ω–∏—Ç –º–µ—Ä—Ç–≤ –∏ –Ω–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å")
            return False
        
        try:
            x = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É X —Ü–µ–ª–∏: "))
            y = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É Y —Ü–µ–ª–∏: "))
            
            return self.game_field.attack_unit(self.selected_unit, x, y)
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
            return False
    
    def use_special_ability(self):
        if not self.selected_unit:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —é–Ω–∏—Ç–∞")
            return
        
        if not self.selected_unit.is_alive():
            print("‚ùå –Æ–Ω–∏—Ç –º–µ—Ä—Ç–≤ –∏ –Ω–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏")
            return
        
        result = self.selected_unit.special_ability()
        print(f"‚ú® –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: {result}")
    
    def interact_with_neutral(self) -> bool:
        if not self.selected_unit:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —é–Ω–∏—Ç–∞")
            return False
        
        try:
            x = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É X –æ–±—ä–µ–∫—Ç–∞: "))
            y = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É Y –æ–±—ä–µ–∫—Ç–∞: "))
            
            return self.game_field.interact_with_object(self.selected_unit, x, y)
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
            return False
    
    def show_unit_menu(self):
        if not self.selected_unit:
            if not self.select_unit():
                return
        
        while True:
            print(f"\nüéÆ –£–ü–†–ê–í–õ–ï–ù–ò–ï –Æ–ù–ò–¢–û–ú: {self.selected_unit.name}")
            print("1.  –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å")
            print("2.  –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å")
            print("3.  –ê—Ç–∞–∫–æ–≤–∞—Ç—å")
            print("4.  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å")
            print("5.  –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –æ–±—ä–µ–∫—Ç–æ–º")
            print("6.  –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —é–Ω–∏—Ç–∞")
            print("7. ‚Ü© –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            
            try:
                choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")
                
                if choice == '1':
                    self.show_unit_status()
                elif choice == '2':
                    self.move_unit()
                elif choice == '3':
                    self.attack_with_unit()
                elif choice == '4':
                    self.use_special_ability()
                elif choice == '5':
                    self.interact_with_neutral()
                elif choice == '6':
                    if self.select_unit():
                        continue
                    else:
                        break
                elif choice == '7':
                    break
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")